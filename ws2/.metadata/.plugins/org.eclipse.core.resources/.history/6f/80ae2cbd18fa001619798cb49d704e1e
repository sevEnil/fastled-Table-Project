// Do not remove the include below
#define USE_OCTOWS2811
#include "CoolTable.h"
#include "SingleStripeAnimationPlayer.h"

const int maxBrightness = 150;
int currentBrigthness = 130;
Table table = Table();

void setup() {
	LEDS.addLeds<OCTOWS2811>(table.ledArray, NUM_LEDS_PER_STRIP);
	LEDS.setBrightness(currentBrigthness);
	FastLED.setBrightness(currentBrigthness);
}

void loop() {
	table.update();
	LEDS.show();
}

Table::Table() {
	pinMode(buttonMutePumpPin, INPUT_PULLUP);
	pinMode(buttonBrightnessPin, INPUT_PULLUP);
	pinMode(buttonNextAnimationPin, INPUT_PULLUP);
	pinMode(buttonUnknownsPin, INPUT_PULLUP);
}

Table::~Table() {
	// TODO Auto-generated destructor stub
}

void Table::update() {

	playAnimation();
	updateButtonStates();
}

void Table::updateButtonStates() {

	bool isButtonTogglePumpPressed = digitalReadFast(buttonMutePumpPin);
	bool isButtonBrightnessPressed = digitalReadFast(buttonBrightnessPin);
	isButtonNextAnimationPressed = digitalReadFast(buttonNextAnimationPin);
	isButtonUnknownPressed = digitalReadFast(buttonUnknownsPin);

	if (buttonMutePump.update()) {
		if (buttonMutePump.fallingEdge()) {
			isButtonTogglePumpPressed = true;
		}
	} else {
		isButtonTogglePumpPressed = false;
	}
	Serial.println(isButtonTogglePumpPressed);

	if (isButtonBrightnessPressed) {
		currentBrigthness = currentBrigthness + 15;
		if (currentBrigthness > maxBrightness) {
			currentBrigthness = 10;
		}
		Serial.println("setting brightness to: " + currentBrigthness);
		LEDS.setBrightness(currentBrigthness);
		FastLED.setBrightness(currentBrigthness);
	}
	if (isButtonNextAnimationPressed) {
		animationMode++;
		Serial.println(
				"Changing mode Button is Pressed setting animationMode to:"
						+ animationMode);
	}
}

void Table::playAnimation() {
	player.update();
	switch (animationMode) {
	case 0:
		player.octoWS2811StripTesterRainbow(ledArray, NUM_STRIPS,
		NUM_LEDS_PER_STRIP);
		break;
	case 1:
		player.bpm(table.getTopLedsArray(), numOfTopLeds);
		break;
	case 2:
		player.juggle(ledsArray, nLedsToPlay);
		break;
	case 3:
		player.playConfetti(ledsArray, nLedsToPlay);
		break;       //---RAINBOW LOOP
	case 4:
		player.rainbow(ledsArray, nLedsToPlay);
		break;
	case 5:
		player.rainbowWithGlitter(ledsArray, nLedsToPlay);
		break;         //---CYLON v1
	case 6:
		player.sinelon(ledsArray, nLedsToPlay);
		break;         //---CYLON v2
	}
	bouncedirection = 0;
	one_color_all(0, 0, 0);
	ledMode = newmode;
	sdelay = 15;
	th
}

struct CRGB * Table::getTopLedsArray() {
	return getLedsForStripe(stripeNumTopLeds, numOfTopLeds);

}
struct CRGB * Table::getFrontLedsArray() {
	return getLedsForStripe(stripeNumFrontLeds, numOfFrontLeds);

}
struct CRGB * Table::getLeftLedsArray() {
	return getLedsForStripe(stripeNumleftLeds, numOfLeftLeds);

}
struct CRGB * Table::getRightLedsArray() {
	return getLedsForStripe(stripeNumRightLeds, numOfRightLeds);

}
struct CRGB * Table::getBackLedsArray() {
	return getLedsForStripe(stripeNumBackLeds, numOfBackLeds);

}
struct CRGB * Table::getFeetLedsArray() {
	return getLedsForStripe(stripeNumFeetLeds, numOfFeetLeds);

}

struct CRGB * Table::getLedsForStripe(int nStripe, int nlength) {
	int startpoint = 0;
	for (int var = 1; var < nStripe; ++var) {
		startpoint = startpoint + NUM_LEDS_PER_STRIP;
	}
	return ledArray(startpoint, nlength);

}

// Do not remove the include below
#define USE_OCTOWS2811
#include "CoolTable.h"

const int maxBrightness = 150;
int currentBrigthness = 30;
Table table = Table();

void setup() {
	//delay(3000);   // If things go bad, you can shutdown before the LED's start drawing power.
	LEDS.addLeds<OCTOWS2811>(table.ledArray, NUM_LEDS_PER_STRIP);
	LEDS.setBrightness(currentBrigthness);
	FastLED.setBrightness(currentBrigthness);
	Serial.begin(9600);
}

void loop() {

	table.update();
	LEDS.show();
	//Serial.println(LEDS.getFPS());}
}

Table::Table() {
	pinMode(buttonMutePumpPin, INPUT_PULLUP);
	pinMode(buttonBrightnessPin, INPUT_PULLUP);
	pinMode(buttonNextAnimationPin, INPUT_PULLUP);
	pinMode(buttonUnknownsPin, INPUT_PULLUP);
	topLeds = LedPart(table.getTopLedsArray(), table.numOfTopLeds);
	frontLeds = LedPart(table.getFrontLedsArray(), table.numOfFrontLeds);
	leftLeds = LedPart(table.getLeftLedsArray(), table.numOfLeftLeds);
	rightLeds = LedPart(table.getRightLedsArray(), table.numOfRightLeds);
	backLeds = LedPart(table.getBackLedsArray(), table.numOfBackLeds);
	feetLeds = LedPart(table.getFeetLedsArray(), table.numOfFeetLeds);
	animator.setPlayer(player);
	animator.settopLeds(topLeds);
	animator.setfrontLeds(frontLeds);
	animator.setleftLeds(leftLeds);
	animator.setrightLeds(rightLeds);
	animator.setbackLeds(backLeds);
	animator.setfeetLeds(feetLeds);
	animator.setAirpump(airpump);

}

Table::~Table() {
	// TODO Auto-generated destructor stub
}

void Table::update() {
	updateButtonStates();
	EVERY_N_MILLIS(topLeds.delay)
	{
		playAnimation();
		player.update();
		animator.update();
	}

}

void Table::updateButtonStates() {

	switch (checkButtonState2(buttonUnknowns)) {
	case 0:
		break;
	case 1:
		Serial.println("COLLOR knopf gedrückt. kurz");
		Serial.println("colorindex wird erhöht. neu:");
		colorIndex++;
		if (colorIndex > 7) {
			colorIndex = 0;
		}
		Serial.print(colorIndex);
		setColorforAllParts();

	case 2: //Longklick means  ?
		Serial.println("Color knopf gedrückt. erhöhe farbe für alle teile");
		increaseColorForAllParts();
		break;
	}

	switch (checkButtonState(buttonMutePump)) {
	case 0:
		break;
	case 1: // shortclick means toogle aripump
		Serial.println("Mute Pump knopf gedrückt. short");
//		airpump.toogleAirpumpState();

		animator.externalRestartAnimations();
		break;
	case 2: //Longklick means  ?
		Serial.println("Mute Pump knopf gedrückt. lang");
		break;

	}

	switch (checkButtonState(buttonBrightness)) {
	case 0:
		break;
	case 1: // shortclick means change the brightness
		Serial.println("buttonBrightness gedrückt. kurz");
		Serial.println("current Brigthness setted to:");
		currentBrigthness = currentBrigthness + 30;
		if (currentBrigthness > maxBrightness) {
			currentBrigthness = 30;
		}
		Serial.print(currentBrigthness);
		LEDS.setBrightness(currentBrigthness);
		FastLED.setBrightness(currentBrigthness);
		break;
	case 2:
		Serial.println("ajust speed");
		increaseDelayForAllParts();
		break;
	}

	switch (checkButtonState(buttonNextAnimation)) {
	case 0:
		break;
	case 1: // shortclick means change to next animation
		animationMode++;
		initializePartsForAnimation();
		Serial.println("Next knopf kurz . animation:");
		Serial.print(animationMode);
		break;
	case 2: //Longklick means  change to previous animation
		animationMode--;
		Serial.println("Zurück knopf. lang animation:");
		Serial.print(animationMode);
		break;
	}
}

//check if there is a short press or a long press and does just one operation for long and short
int Table::checkButtonState(Bounce &button) {
	if (button.update()) {
		if (button.fallingEdge()) {
			Serial.println("falling edge");
			buttonTimePressed = millis();
		} else if (button.risingEdge()) {
			if (buttonTimePressed != 0) {
				unsigned long deltaTime = millis() - buttonTimePressed;
				buttonTimePressed = 0;
				Serial.println("rising edge");
				if (deltaTime < 500) {
					// do short time stuff
					Serial.println("short");
					return 1;
				} else {
					// do long time stuff
					Serial.println("long");
					return 2;
				}
			}
		}
	}
	return 0;
}

int Table::checkButtonState2(Bounce &button) {
	button.update();
	if (button.fallingEdge()) {
		Serial.println("falling edge");
		buttonTimePressed = millis();
	} else if (buttonTimePressed && !button.read()) {
		if (buttonTimePressed != 0) {
			unsigned long deltaTime = millis() - buttonTimePressed;
			if (deltaTime > 500) {
				return 2; // its a longtime press
			}
		}
	} else if (button.risingEdge()) {
		unsigned long deltaTime = millis() - buttonTimePressed;
		if (deltaTime < 500) {
			return 1; //its a shorttime press
		}
		buttonTimePressed = 0;
	}
	return 0;
}

void Table::increaseDelayForAllParts() {
	EVERY_N_MILLIS(100)
	{
		topLeds.delay += 20;
		if (topLeds.delay > 200) {
			topLeds.delay = 0;
		}
		Serial.println("delay setted:");
		Serial.print(topLeds.delay);
		frontLeds.delay = topLeds.delay;
		leftLeds.delay = topLeds.delay;
		rightLeds.delay = topLeds.delay;
		backLeds.delay = topLeds.delay;
		feetLeds.delay = topLeds.delay;

	}

}

void Table::increaseColorForAllParts() {
	EVERY_N_MILLISECONDS(10)
	{
		setColorForLedPart(topLeds.firstHue + 1, topLeds.secondHue + 1, topLeds);
		setColorForLedPart(frontLeds.firstHue + 1, frontLeds.secondHue + 1, frontLeds);
		setColorForLedPart(leftLeds.firstHue + 1, leftLeds.secondHue + 1, leftLeds);
		setColorForLedPart(rightLeds.firstHue + 1, rightLeds.secondHue + 1, rightLeds);
		setColorForLedPart(backLeds.firstHue + 1, backLeds.secondHue + 1, backLeds);
		setColorForLedPart(feetLeds.firstHue + 1, feetLeds.secondHue + 1, feetLeds);
	}
}

void Table::setColorforAllParts() {

	switch (colorIndex) {
	case 0:
		setColorForLedPart(HUE_AQUA, HUE_GREEN, topLeds);
		setColorForLedPart(HUE_AQUA, HUE_GREEN, frontLeds);
		setColorForLedPart(HUE_AQUA, HUE_GREEN, leftLeds);
		setColorForLedPart(HUE_AQUA, HUE_GREEN, rightLeds);
		setColorForLedPart(HUE_AQUA, HUE_GREEN, backLeds);
		setColorForLedPart(HUE_AQUA, HUE_GREEN, feetLeds);
	case 1:
		setColorForLedPart(HUE_BLUE, HUE_RED, topLeds);
		setColorForLedPart(HUE_BLUE, HUE_RED, frontLeds);
		setColorForLedPart(HUE_BLUE, HUE_RED, leftLeds);
		setColorForLedPart(HUE_BLUE, HUE_RED, rightLeds);
		setColorForLedPart(HUE_BLUE, HUE_RED, backLeds);
		setColorForLedPart(HUE_BLUE, HUE_RED, feetLeds);
		break;
	case 2:
		setColorForLedPart(HUE_GREEN, HUE_PURPLE, topLeds);
		setColorForLedPart(HUE_GREEN, HUE_PURPLE, frontLeds);
		setColorForLedPart(HUE_GREEN, HUE_PURPLE, leftLeds);
		setColorForLedPart(HUE_GREEN, HUE_PURPLE, rightLeds);
		setColorForLedPart(HUE_GREEN, HUE_PURPLE, backLeds);
		setColorForLedPart(HUE_GREEN, HUE_PURPLE, feetLeds);
		break;
	case 3:
		setColorForLedPart(HUE_ORANGE, HUE_YELLOW, topLeds);
		setColorForLedPart(HUE_ORANGE, HUE_YELLOW, frontLeds);
		setColorForLedPart(HUE_ORANGE, HUE_YELLOW, leftLeds);
		setColorForLedPart(HUE_ORANGE, HUE_YELLOW, rightLeds);
		setColorForLedPart(HUE_ORANGE, HUE_YELLOW, backLeds);
		setColorForLedPart(HUE_ORANGE, HUE_YELLOW, feetLeds);
		break;
	case 4:
		setColorForLedPart(HUE_PINK, HUE_ORANGE, topLeds);
		setColorForLedPart(HUE_PINK, HUE_ORANGE, frontLeds);
		setColorForLedPart(HUE_PINK, HUE_ORANGE, leftLeds);
		setColorForLedPart(HUE_PINK, HUE_ORANGE, rightLeds);
		setColorForLedPart(HUE_PINK, HUE_ORANGE, backLeds);
		setColorForLedPart(HUE_PINK, HUE_ORANGE, feetLeds);
		break;
	case 5:
		setColorForLedPart(HUE_PURPLE, HUE_AQUA, topLeds);
		setColorForLedPart(HUE_PURPLE, HUE_AQUA, frontLeds);
		setColorForLedPart(HUE_PURPLE, HUE_AQUA, leftLeds);
		setColorForLedPart(HUE_PURPLE, HUE_AQUA, rightLeds);
		setColorForLedPart(HUE_PURPLE, HUE_AQUA, backLeds);
		setColorForLedPart(HUE_PURPLE, HUE_AQUA, feetLeds);
		break;
	case 6:
		setColorForLedPart(HUE_RED, HUE_PINK, topLeds);
		setColorForLedPart(HUE_RED, HUE_PINK, frontLeds);
		setColorForLedPart(HUE_RED, HUE_PINK, leftLeds);
		setColorForLedPart(HUE_RED, HUE_PINK, rightLeds);
		setColorForLedPart(HUE_RED, HUE_PINK, backLeds);
		setColorForLedPart(HUE_RED, HUE_PINK, feetLeds);
		break;
	case 7:
		setColorForLedPart(HUE_YELLOW, HUE_BLUE, topLeds);
		setColorForLedPart(HUE_YELLOW, HUE_BLUE, frontLeds);
		setColorForLedPart(HUE_YELLOW, HUE_BLUE, leftLeds);
		setColorForLedPart(HUE_YELLOW, HUE_BLUE, rightLeds);
		setColorForLedPart(HUE_YELLOW, HUE_BLUE, backLeds);
		setColorForLedPart(HUE_YELLOW, HUE_BLUE, feetLeds);
		break;
	}
}

void Table::setColorForLedPart(uint8_t hue1, uint8_t hue2, LedPart &part) {
	part.firstHue = hue1;
	part.secondHue = hue2;

}

void Table::initializePartsForAnimation(){
	switch (animationMode) {
	case 11:
		backLeds.loopIndex=0;
		backLeds.firstHue= HUE_RED;
		backLeds.secondHue= HUE_BLUE;
		backLeds.directionReverse=false;
		leftLeds.loopIndex=0;
		leftLeds.firstHue= HUE_RED;
		leftLeds.secondHue= HUE_BLUE;
		leftLeds.directionReverse=false;
		topLeds.loopIndex=0;
		topLeds.firstHue= HUE_RED;
		topLeds.secondHue= HUE_BLUE;
		topLeds.directionReverse=false;
		rightLeds.loopIndex=0;
		rightLeds.firstHue= HUE_RED;
		rightLeds.secondHue= HUE_BLUE;
		rightLeds.directionReverse=false;
		frontLeds.loopIndex=0;
		frontLeds.firstHue= HUE_RED;
		frontLeds.secondHue= HUE_BLUE;
		frontLeds.directionReverse=false;
		break;
	}

}

struct CRGB * Table::getTopLedsArray() {
	return getLedsForStripe(stripeNumTopLeds, numOfTopLeds);

}
struct CRGB * Table::getFrontLedsArray() {
	return getLedsForStripe(stripeNumFrontLeds, numOfFrontLeds);

}
struct CRGB * Table::getLeftLedsArray() {
	return getLedsForStripe(stripeNumleftLeds, numOfLeftLeds);

}
struct CRGB * Table::getRightLedsArray() {
	return getLedsForStripe(stripeNumRightLeds, numOfRightLeds);

}
struct CRGB * Table::getBackLedsArray() {
	return getLedsForStripe(stripeNumBackLeds, numOfBackLeds);

}
struct CRGB * Table::getFeetLedsArray() {
	return getLedsForStripe(stripeNumFeetLeds, numOfFeetLeds);

}

struct CRGB * Table::getLedsForStripe(int nStripe, int nlength) {
	int startpoint = 0;
	for (int var = 1; var < nStripe; ++var) {
		startpoint = startpoint + NUM_LEDS_PER_STRIP;
	}
	return ledArray(startpoint, nlength);

}

void Table::playAnimation() {
	if (animationMode > 35) {
		animationMode = 0;
	}
	if (animationMode < 0) {
		animationMode = 35;
	}
	animationMode=-1;
	switch (animationMode) {
	case -1:
		player.rainbow_loop(topLeds); // kaput
		player.rainbow_loop(frontLeds); // kaput
		player.rainbow_loop(leftLeds); // kaput
		player.rainbow_loop(rightLeds); // kaput
		player.rainbow_loop(backLeds); // kaput

		break;
	case 0:
		animator.startupAnimation();
		break;
	case 1:
		player.playBlack(feetLeds);
		player.play_one_color_allHSV(backLeds, topLeds.firstHue);
		player.play_one_color_allHSV(leftLeds, leftLeds.firstHue);
		player.play_one_color_allHSV(rightLeds, leftLeds.firstHue);
		player.play_one_color_allHSV(frontLeds, leftLeds.firstHue);
		player.play_one_color_allHSV(topLeds, leftLeds.firstHue);
		break;
	case 2:
		player.octoWS2811StripTesterRainbow(table.ledArray, NUM_STRIPS,
		NUM_LEDS_PER_STRIP);
		break;
	case 3:
		player.playBlack(feetLeds);
		player.playRainbowWithGlitter(backLeds);
		player.playRainbowWithGlitter(leftLeds);
		player.playRainbowWithGlitter(rightLeds);
		player.playRainbowWithGlitter(frontLeds);
		player.playRainbowWithGlitter(backLeds);
		break;
	case 4:
		player.playBlack(feetLeds);
		player.playRainbowWithGlitter(backLeds);
		player.playRainbowWithGlitter(leftLeds);
		player.playRainbowWithGlitter(rightLeds);
		player.playRainbowWithGlitter(frontLeds);
		player.playRainbowWithGlitter(backLeds);
		break;
	case 5:
		player.playbpm(backLeds);
		break;
	case 6:
		player.playColor_bounce(backLeds);
		break;
	case 7:
		player.color_bounceFADE(backLeds);
		break;
	case 8:
		player.color_loop_vardelay(backLeds);
		break;
	case 9:
		player.ems_lightsALL(backLeds);
		break;
	case 10:
		player.ems_lightsONE(backLeds);
		break;
	case 11:
		player.playems_lightsSTROBE(backLeds);
		player.playems_lightsSTROBE(leftLeds);
		player.playems_lightsSTROBE(rightLeds);
		player.playems_lightsSTROBE(frontLeds);
		player.playems_lightsSTROBE(topLeds);
		delay(20);
		break;
	case 12:
		player.fade_vertical(backLeds);
		break;
	case 13:
		player.playflicker(backLeds);
		break;
	case 14:
		player.playkitt(frontLeds);
		break;
	case 15:
		player.matrix(backLeds);
		break;
	case 16:
		player.pop_horizontal(backLeds);
		break;
	case 17:
		player.pulse_one_color_all(backLeds);
		break;
	case 18:
		player.pulse_one_color_all_rev(backLeds);
		player.pulse_one_color_all_rev(frontLeds);
		player.pulse_one_color_all_rev(leftLeds);
		player.pulse_one_color_all_rev(rightLeds);
		player.pulse_one_color_all_rev(topLeds);

		break;
	case 19:
		player.fill_quad_bright_curve(backLeds);
		break;
	case 20:
		break;
	case 21:
		player.rainbow_loop(backLeds); // kaput
		break;
	case 22:
		player.playrandom_burst(backLeds);
		break;
	case 23:
		player.playrandom_color_pop(backLeds);
		break;
	case 24:
		player.random_red(backLeds);
		break;
	case 25:
		player.rgb_propeller(backLeds); //zu schnell
		break;
	case 26:
		player.rule30(backLeds);
		break;
	case 27:
		player.rwb_march(backLeds);
		break;
	case 28:
		player.sin_bright_wave(backLeds); // dunkel
		break;
	case 29:
		player.strip_march_ccw(backLeds); //dunkel
		break;
	case 30:
		player.strip_march_cw(backLeds); //dunkel
		break;
	case 31:

		break;
	case 32:
		player.playConfetti(backLeds);
		break;
	case 33:
		player.playJuggle(backLeds);
		break;
	case 34:
		break;
	case 35:
		break;
	}
}
